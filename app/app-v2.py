# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'app-v1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from pathlib import Path
import pandas as pd
import os
from numpy import loadtxt
import sys

from PyQt5 import QtWebEngineWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *

# Local imports
from data import DataHandler


class Ui_MainWindow(object):
    def __init__(self):
        self.html_files = []
        self.MainWindow = QtWidgets.QMainWindow()
        self.setupUi(self.MainWindow)
        self.load_data()
        self.load_map()
        self.MainWindow.show()

    def load_data(self):
        # Loading External Data
        self.dh = DataHandler(preprocess=False)

        for n in self.dh.ngbh:
            self.comboOrigin.addItem(n)

    def load_map(self):
        url = self.set_map()
        self.widget.load(url)

    def create_comboBoxes(self):
        # Initialising Combo Box
        self.comboOrigin = QtWidgets.QComboBox(self.centralwidget)
        self.comboOrigin.setGeometry(QtCore.QRect(32, 96, 258, 50))
        self.comboOrigin.setObjectName("comboOrigin")

    def create_buttons(self):
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(1104, 16, 149, 45))
        self.pushButton.setObjectName("closeButton")

    def create_title(self):
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(32, 16, 482, 50))
        self.textEdit.setObjectName("textEdit")

    def event_listener(self):
        # Changing Origin
        self.comboOrigin.currentTextChanged.connect(self.on_combobox_changed)
        # Exit Button
        self.pushButton.clicked.connect(self.closeEvent)

    def setupUi(self, MainWindow):

        # Initialising Main Window
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 960)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Initializing widgets
        self.create_comboBoxes()
        self.create_title()
        self.create_buttons()

        self.widget = QtWebEngineWidgets.QWebEngineView(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(31, 175, 1218, 674))
        self.widget.setObjectName("widget")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 42))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.event_listener()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(
            _translate("MainWindow", "Proximus Dataset Visualization Tool")
        )
        self.textEdit.setHtml(
            _translate(
                "MainWindow",
                '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">\n'
                '<html><head><meta name="qrichtext" content="1" /><style type="text/css">\n'
                "p, li { white-space: pre-wrap; }\n"
                "</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" text-decoration: underline;">Welcome to the Proximus Dataset Visualizer</span></p></body></html>',
            )
        )
        self.pushButton.setText(_translate("MainWindow", "Exit"))

    def closeEvent(self, event):
        """
        Closes the application.
        """
        print(self.html_files)

        with open("Code/app/cache/temp.txt", "w") as f:
            for item in self.html_files:
                f.write("%s\n" % item)

        # app.quit()
        # app.close()

        print("Exiting the application.")

        # sys.exit()

    def set_map(self):

        origin = self.comboOrigin.currentText()
        m = self.dh.get_map(origin)

        tmp_file = QtCore.QTemporaryFile(
            "Code/app/cache/XXXXXX.html", self.centralwidget
        )
        if tmp_file.open():
            fileName = tmp_file.fileName()
            m.save(fileName)
            self.html_files.append(fileName)
            print(self.html_files)
            url = QtCore.QUrl.fromLocalFile(fileName)
            self.widget.load(url)

        print("Cannot open file.")
        print(tmp_file.open())

        return url

    def on_combobox_changed(self, value):
        self.set_map()


def main():
    app = QtWidgets.QApplication([])
    ui = Ui_MainWindow()
    # ui.show()
    app.exec_()


if __name__ == "__main__":

    # app = QtWidgets.QApplication(sys.argv)
    # MainWindow = QtWidgets.QMainWindow()
    # ui = Ui_MainWindow()
    # MainWindow.show()
    # app.exec_()

    main()

    print("Successfully exited the application.")

    # # Cleaning
    # with open("Code/app/cache/temp.txt") as f:
    #     html_files = f.read().splitlines()
    # print(html_files)
    # print(f"Deleting {len(html_files)} temporary files...")
    # for f in html_files:
    #     os.remove(f)

    # sys.exit()

